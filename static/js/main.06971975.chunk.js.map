{"version":3,"sources":["components/PlayerSelection.tsx","components/PlayerViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlayerSelection","setPlayer","i","Col","type","name","value","Button","onClick","PLAYERS","PlayerViewer","activePlayer","Name","PTS","AST","TRB","App","useState","setActivePlayer","Container","className","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAIO,SAASA,EAAT,GAAoF,IAA1DC,EAAyD,EAAzDA,UACzBC,EAAE,EACN,OACI,eAACC,EAAA,EAAD,WACA,+CACA,iCACI,wEAEI,uBAAOC,KAAK,OAAOC,KAAK,YAExB,uBAAOD,KAAK,SAASE,MAAM,cAElCL,EACD,cAACM,EAAA,EAAD,CAAQC,QAAS,kBAAMP,EAAUQ,EAAQP,OAAzC,8BCfD,SAASQ,EAAT,GAA2E,IAApDC,EAAmD,EAAnDA,aAC1B,OACI,eAACR,EAAA,EAAD,WACA,+CACA,iDACCQ,EAAaC,KACd,uBACC,iBACD,uBACC,WAAaD,EAAaE,IAC3B,uBACC,YAAaF,EAAaG,IAC3B,uBACC,aAAaH,EAAaI,O,0BCQpBC,MAbf,WACA,MAAwCC,mBAAiBR,EAAQ,IAAjE,mBAAOE,EAAP,KAAqBO,EAArB,KAEE,OACE,cAACC,EAAA,EAAD,CAAWC,UAAU,MAArB,SACE,eAACC,EAAA,EAAD,WACE,cAACrB,EAAD,CAAiBC,UAAWiB,IAC5B,cAACR,EAAD,CAAcC,aAAcA,UCHrBW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.06971975.chunk.js","sourcesContent":["import { Button, Col } from 'react-bootstrap'\nimport { Player } from '../interfaces/player'\nimport PLAYERS from '../assets/players.json';\n\nexport function PlayerSelection({setPlayer}: {setPlayer: (p: Player)=>void}): JSX.Element {\n    var i=0;\n    return(\n        <Col>\n        <h1>Select Player</h1>\n        <form>\n            <label>\n                Name (this doesn't work right now):\n                <input type=\"text\" name=\"name\" />\n            </label>\n                <input type=\"submit\" value=\"Submit\" />\n        </form>\n        {setPlayer}\n        <Button onClick={() => setPlayer(PLAYERS[i++] as Player)}>Change Player</Button>\n        </Col>\n    )\n}","import { Col } from 'react-bootstrap'\nimport { Player } from '../interfaces/player'\nexport function PlayerViewer({activePlayer}: {activePlayer: Player}): JSX.Element{\n    return(\n        <Col>\n        <h1>Player Viewer</h1>\n        <div>Current player</div>\n        {activePlayer.Name}\n        <br/>\n        {\"Per Game Stats\"}\n        <br/>\n        {\"Points: \" + activePlayer.PTS}\n        <br/>\n        {\"Assists: \"+ activePlayer.AST}\n        <br/>\n        {\"Rebounds: \"+activePlayer.TRB}\n        </Col>\n    )\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PLAYERS from './assets/players.json';\nimport { PlayerSelection } from './components/PlayerSelection';\nimport { PlayerViewer } from './components/PlayerViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap'\nimport { Player } from './interfaces/player';\n\nfunction App(): JSX.Element {\nconst [activePlayer, setActivePlayer] = useState<Player>(PLAYERS[0] as Player);\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <PlayerSelection setPlayer={setActivePlayer}></PlayerSelection>\n        <PlayerViewer activePlayer={activePlayer}></PlayerViewer>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}